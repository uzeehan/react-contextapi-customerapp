{"version":3,"sources":["Context.js","components/Contacts/Contact.js","components/Contacts/Contacts.js","components/Layout/TextInputGroup.js","components/Contacts/AddContact.js","components/Pages/About.js","components/Pages/NotFound.js","components/Layout/Header.js","components/Pages/Testpage.js","components/Contacts/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","console","log","delete","className","name","onClick","style","float","color","bind","to","email","phone","href","Contacts","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","e","target","onSubmitAddContact","preventDefault","newContact","post","history","push","onSubmit","About","NotFound","Header","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Testpage","username","website","then","EditContact","onSubmitEditContact","updateContact","match","params","put","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.17d0033f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n// create a CONTEXT OBJECT\r\nconst Context = React.createContext();\r\n\r\n// create a Reducer \r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                // initial state = ...state\r\n                ...state, \r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            }\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            }\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? contact= action.payload : contact)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n// create a PROVIDER CLASS COMPONENT  \r\nexport class Provider extends Component {\r\n\r\n    state = {\r\n        contacts: [],\r\n        // declare DISPATCH function here\r\n        dispatch: action => this.setState(state => reducer (state, action))\r\n    }\r\n\r\n    // component did mount\r\n    // componentDidMount() {\r\n    //     axios.get('https://jsonplaceholder.typicode.com/users')\r\n    //     .then(res => this.setState({\r\n    //         contacts: res.data\r\n    //     }))\r\n    // }\r\n\r\n    // component did mount - async and await\r\n    async componentDidMount() {\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n\r\n        this.setState({\r\n            contacts: res.data\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                { this.props.children }\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}  \r\n\r\n// export CONSUMER \r\nexport const Consumer = Context;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../Context';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nexport class Contact extends Component {\r\n\r\n    state = {\r\n        showContactInfo: false\r\n    }\r\n\r\n    // onDeleteClick = (id, dispatch) => {\r\n    //     console.log(\"Clicked\");\r\n\r\n    //     axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n    //     .then(res => dispatch({\r\n    //         type: 'DELETE_CONTACT',\r\n    //         payload: id\r\n    //     }));\r\n\r\n    //     // dispatch({\r\n    //     //     type: 'DELETE_CONTACT',\r\n    //     //     payload: id\r\n    //     // });\r\n    // };\r\n    onDeleteClick = async (id, dispatch) => {\r\n        console.log(\"Clicked\");\r\n\r\n        const res = await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        dispatch({\r\n            type: 'DELETE_CONTACT',\r\n            payload: id\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { contact } = this.props;\r\n        const { showContactInfo } = this.state;\r\n        return (\r\n            <Consumer>\r\n                {(value) => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">{contact.name} {' '}\r\n                                    <i className=\"fas fa-sort-down\"\r\n                                        onClick={() => {\r\n                                            this.setState({\r\n                                                showContactInfo: !this.state.showContactInfo\r\n                                            })\r\n                                        }}></i>\r\n                                    <i className=\"fas fa-times\" style={{ float: \"right\", color: \"red\" }}\r\n                                        onClick={this.onDeleteClick.bind(this, contact.id, dispatch)}></i>\r\n                                    <Link to={`contact/edit/${contact.id}`} >\r\n                                        <i className=\"fas fa-pencil-alt\"></i>\r\n                                    </Link>\r\n                                </h4>\r\n                                {\r\n                                    showContactInfo ? (\r\n                                        <p className=\"card-text\">\r\n                                            <span>Email: {contact.email}</span> <br />\r\n                                            <span>Phone: {contact.phone}</span> <br /><br />\r\n                                            <a href=\"/\" className=\"btn-new-primary\">read more</a>\r\n                                        </p>\r\n                                    ) : null\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../Context';\r\n\r\nexport class Contacts extends Component {\r\n\r\n    // state = {\r\n    //     contacts: [\r\n    //         { id:1, name: 'John Doe', email: 'john@mail.com', phone: '4444-444-444' },\r\n    //         { id:2, name: 'Danish Johnson', email: 'danish@mail.com', phone: '5555-555-555' },\r\n    //         { id:3, name: 'Chris Hemsworth', email: 'chris@mail.com', phone: '6666-666-666' },\r\n    //         { id:4, name: 'James Bond', email: 'james@mail.com', phone: '2222-222-222' }\r\n    //     ]\r\n    // }\r\n\r\n    // onDeleteContact = (id) => {\r\n    //     const { contacts } = this.state;\r\n    //     const newContacts = contacts.filter((contact) => { return contact.id !== id});\r\n    //     this.setState({\r\n    //         contacts: newContacts\r\n    //     });\r\n    //     console.log(id);\r\n    // }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Consumer>\r\n                { (value) => {\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <div className=\"container\">\r\n                        <h1 className=\"text-display-4\">CUSTOMER LIST</h1>\r\n                        {\r\n                            contacts.map((contact) => {\r\n                                return (\r\n                                    <Contact \r\n                                        key={contact.id}\r\n                                        contact={contact}\r\n                                    />\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n\r\n        // const { contacts } = this.state;\r\n        \r\n        // return (\r\n        //     <div className=\"container mt-3 pt-3\">\r\n        //         <h1>Customers List</h1>\r\n        //         {\r\n        //             contacts.map((contact) => {\r\n        //                 return (\r\n        //                     <Contact \r\n        //                         key={contact.id}\r\n        //                         contact={contact}\r\n        //                         onDeleteContactHandler={this.onDeleteContact.bind(this, contact.id)}\r\n        //                     />\r\n        //                 )\r\n        //             })\r\n        //         }\r\n        //     </div>\r\n        // )\r\n    }\r\n}\r\n\r\nexport default Contacts\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n\r\nconst TextInputGroup = ({ label, name, placeholder, type, value, onChange, error }) => {\r\n    // const { } = props;\r\n    return (\r\n        <div className=\"form-group row\">\r\n            <label htmlFor={name} className=\"col-md-2\">{label}</label>\r\n            <input type={type} \r\n                name={name} \r\n                className= {classnames('form-control col-md-10', \r\n                {\r\n                    'is-invalid': error\r\n                })}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                type= {type}\r\n                onChange={onChange} />\r\n            { error && <div className=\"invalid-feedback\">{error}</div> }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n// type verification\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\n\r\nexport default TextInputGroup;","import React, { Component } from 'react';\r\nimport { Consumer } from '../../Context';\r\nimport TextInputGroup from '../Layout/TextInputGroup';\r\n// import uuid from 'react-uuid';\r\nimport axios from 'axios';\r\n\r\nexport class AddContact extends Component {\r\n\r\n    // form initial state\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        errors: {}\r\n    }\r\n\r\n    // onchange - enable inputs to enter data and set new state data\r\n    onChange = e => this.setState({\r\n        [e.target.name]: e.target.value\r\n    })\r\n\r\n    // submit form \r\n    onSubmitAddContact = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        // pull out properties from the component state\r\n        const { name, email, phone } = this.state;\r\n\r\n        // create a new contact\r\n        const newContact = {\r\n            // id: uuid(),\r\n            name: name,\r\n            email: email,\r\n            phone: phone\r\n        }\r\n\r\n        // validate form inputs\r\n        if(name === \"\") {\r\n            this.setState({\r\n                errors: {\r\n                    name: \"Name is required\"\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        if(email === \"\") {\r\n            this.setState({ errors: { email: \"Email is required\" }});\r\n            return;\r\n        }\r\n\r\n        if(phone === \"\") {\r\n            this.setState({ errors: { phone: \"Phone is required\" } });\r\n            return;\r\n        }\r\n\r\n        // post request \r\n        // axios.post('https://jsonplaceholder.typicode.com/users', newContact)\r\n        // .then(res => console.log(res.data))\r\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n        dispatch({\r\n            type: 'ADD_CONTACT',\r\n            payload: res.data\r\n        });\r\n\r\n        // axios.post('https://jsonplaceholder.typicode.com/users', newContact)\r\n        // .then(res => dispatch({\r\n        //     type: 'ADD_CONTACT',\r\n        //     payload: res.data\r\n        // }))\r\n\r\n\r\n        // dispatch\r\n        // dispatch({\r\n        //     type: 'ADD_CONTACT',\r\n        //     payload: newContact\r\n        // });\r\n\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: ''\r\n        })\r\n\r\n        this.props.history.push('/');\r\n\r\n        // console.log(this.state);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        // destrcuturing Contact values from the state\r\n        const { name, email, phone, errors } = this.state;\r\n        return (\r\n            <Consumer>\r\n                {(value) => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div className=\"col-md-12\">\r\n                            <h1 className=\"text-display-4\">ADD CONTACT</h1>\r\n                            <form onSubmit={this.onSubmitAddContact.bind(this, dispatch)} >\r\n                                <TextInputGroup\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Enter Name\"\r\n                                    value={name}\r\n                                    onChange={this.onChange}\r\n                                    error= {errors.name}\r\n                                />\r\n                                <TextInputGroup \r\n                                    label= \"Email\"\r\n                                    name= \"email\"\r\n                                    placeholder=\"Enter Email\" \r\n                                    value= {email}\r\n                                    type= \"email\"\r\n                                    onChange= {this.onChange}\r\n                                    error= {errors.email}\r\n                                />\r\n\r\n                                <TextInputGroup\r\n                                    label= \"Phone\"\r\n                                    name= \"phone\"\r\n                                    placeholder= \"Enter Phone\"\r\n                                    value= {phone}\r\n                                    onChange= {this.onChange}\r\n                                    error= {errors.phone}\r\n                                />\r\n\r\n                                <div className=\"row\">\r\n                                    <input type=\"submit\" value=\"ADD CONTACT\" className=\"btn btn-warning btn-block\" />\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddContact\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"text-display-4\">ABOUT US</h1>\r\n            <p className=\"lead\">This is a simple app.</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div className=\"col-md-12\">\r\n            <h1>404 - PAGE NOT FOUND</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container\">\r\n                <Link to=\"#\" className=\"navbar-brand\">Contact Manager</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item\"><Link to=\"/\">Home</Link></li>\r\n                        <li className=\"nav-item\"><Link to=\"/contact/add\">Add</Link></li>\r\n                        <li className=\"nav-item\"><Link to=\"/about\">About</Link></li>\r\n                        {/* <li className=\"nav-item\"></li> */}\r\n                    </ul>\r\n                </div>\r\n\r\n            </div>\r\n                \r\n\r\n        </nav>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nexport class Testpage extends Component {\r\n\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         newnam: '',\r\n    //         email: ''\r\n    //     };\r\n    // }\r\n\r\n    state = {\r\n        username: '',\r\n        email: '',\r\n        website: ''\r\n    };\r\n\r\n\r\n    componentDidMount () {\r\n        // fetch ('https://jsonplaceholder.typicode.com/users/1')\r\n        // .then(res => console.log(res.json()));\r\n\r\n        // fetch ('https://jsonplaceholder.typicode.com/users/1')\r\n        // .then(res => res.json())\r\n        // .then(data => console.log(data))\r\n\r\n        // fetch('https://jsonplaceholder.typicode.com/users/1')\r\n        // .then(res => res.json())\r\n        // .then(data => this.setState({\r\n        //     username: data.username,\r\n        //     email: data.email,\r\n        //     website: data.website\r\n        // }));\r\n\r\n        // const data = request('https://jsonplaceholder.typicode.com/users/1', function (error, response, body) {\r\n        //     console.error('error:', error); // Print the error if one occurred\r\n        //     console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\r\n        //     console.log('body:', body); // Print the HTML for the Google homepage.\r\n        //     return body\r\n        // })       \r\n\r\n        // axios\r\n        // axios.get('https://jsonplaceholder.typicode.com/users/1')\r\n        // .then(res =>  console.log(res.data));\r\n\r\n        axios.get('https://jsonplaceholder.typicode.com/users/1')\r\n        .then(res => this.setState({\r\n            username: res.data.username,\r\n            email: res.data.email,\r\n            website: res.data.website\r\n        }))\r\n        \r\n\r\n    }\r\n\r\n    //#region Life Cycle Methods\r\n    // // component did mount\r\n    // componentDidMount () {\r\n    //     console.log('did mount...');\r\n    // }\r\n\r\n    // // component will mount\r\n    // componentWillMount () {\r\n    //     console.log('will mount');\r\n    // }\r\n\r\n    // // componentDidUpdate\r\n    // componentDidUpdate () {\r\n    //     console.log('Compnent Did Update...');\r\n    // }\r\n\r\n    // // component will update\r\n    // componentWillUpdate () {\r\n    //     console.log('will update');\r\n    // }\r\n\r\n    // // component will receive props\r\n    // UNSAFE_componentWillReceiveProps(nextProps, nextState) {\r\n    //     console.log('will receive props');\r\n    // }\r\n\r\n    // // get derived state form props\r\n    // static getDerivedStateFromProps (nextProps, nextState) {\r\n    //     return {\r\n    //         test: 'something'\r\n    //     };\r\n    //     console.log('getDerivedStateFromProps');\r\n    // }\r\n\r\n    // // get snapshot\r\n    // getSnapshotBeforeUpdate () {\r\n    //     console.log('getSnapshotBeforeUpdate');\r\n    // }\r\n    //#endregion\r\n\r\n    render() {\r\n        const {  username, email, website } = this.state;\r\n        return (\r\n            <div>\r\n                <h1>TEST</h1>\r\n                <h3>{ username }</h3>\r\n                <p>{ email }</p>\r\n                <p>{ website } </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Testpage\r\n","import React, { Component } from 'react';\r\nimport TextInputGroup from '../Layout/TextInputGroup';\r\nimport { Consumer } from '../../Context';\r\nimport axios from 'axios';\r\n\r\nexport class EditContact extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    // async componentDidMount () {\r\n    //     const { id } = this.props.match.params;\r\n\r\n    //     const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n    //     const contact = res.data;\r\n\r\n    //     this.setState({\r\n    //         name: contact.name,\r\n    //         email: contact.email,\r\n    //         phone: contact.phone\r\n    //     })\r\n\r\n    //     console.log(id);\r\n    // }\r\n\r\n    // Component Did Mount - get/fetch data fromt the JSON placeholder fake REST API server\r\n    componentDidMount () {\r\n        const { id } = this.props.match.params;\r\n        axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n        .then( res => this.setState({\r\n            name: res.data.name,\r\n            email: res.data.email,\r\n            phone: res.data.phone\r\n        }))\r\n    }\r\n\r\n    // UNCONTROLLED COMPONENT\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value })\r\n\r\n    // EDIT FUNCTION \r\n    onSubmitEditContact = (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        // form validation\r\n        if (name === '') {\r\n            this.setState({ errors: { name: 'Enter valid name' } });\r\n            return;\r\n        }\r\n\r\n        if (email === '') {\r\n            this.setState({ errors: { email: \"Enter valid email\" } });\r\n            return;\r\n        }\r\n\r\n        if (phone === '') {\r\n            this.setState({ errors: { phone: 'Enter valid phone' } });\r\n            return;\r\n        }\r\n\r\n        const updateContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        // AXIOS PUT\r\n        const { id } = this.props.match.params;\r\n        axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updateContact)\r\n        .then(res => dispatch({\r\n            type: 'UPDATE_CONTACT',\r\n            payload: res.data\r\n        }));\r\n\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    }\r\n\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n        return (\r\n\r\n            <Consumer>\r\n                {(value) => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        <div>\r\n                            <h1>EDIT CONTACT</h1>\r\n                            <form onSubmit={this.onSubmitEditContact.bind(this, dispatch)}>\r\n                                <TextInputGroup\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Enter name\"\r\n                                    value={name}\r\n                                    onChange={this.onChange}\r\n                                    error={errors.name}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    placeholder=\"Enter Email\"\r\n                                    type=\"email\"\r\n                                    value={email}\r\n                                    onChange={this.onChange}\r\n                                    error={errors.email}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label=\"Phone\"\r\n                                    name=\"phone\"\r\n                                    placeholder=\"Enter Phone\"\r\n                                    value={phone}\r\n                                    onChange={this.onChange}\r\n                                    error={errors.phone}\r\n                                />\r\n\r\n                                <div className=\"form-group row\">\r\n                                    <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-block btn-success\" />\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditContact\r\n","import React from 'react';\nimport Contacts from './components/Contacts/Contacts';\nimport AddContact from './components/Contacts/AddContact';\nimport { Provider } from './Context';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport About from './components/Pages/About';\nimport NotFound from './components/Pages/NotFound';\nimport Header from './components/Layout/Header';\nimport Testpage from './components/Pages/Testpage';\nimport './scss/main.scss';\nimport EditContact from './components/Contacts/EditContact';\n\nfunction App() {\n  return (\n    <Provider>\n      <Router>\n        <Header />\n        <div className=\"App container\">\n          <Switch>\n            <Route exact path=\"/\" component={Contacts} />\n            <Route path=\"/contact/add\" component={AddContact} />\n            <Route path=\"/contact/edit/:id\" component={EditContact} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/test\" component={Testpage} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}